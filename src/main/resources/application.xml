<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
 	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.2.xsd
         http://www.springframework.org/schema/tx
     	 http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
	<!--加载db.properties-->
	<context:property-placeholder location="classpath*:jdbc.properties"/>

	<!--配置druid连接池-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_user}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="1500" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
		<!-- <property name="poolPreparedStatements" value="true" /> <property
            name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<!-- 验证数据库连接有效性，要求查询语句 -->
		<property name="validationQuery" value="SELECT 'x'" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置true会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置true会降低性能 -->
		<property name="testOnReturn" value="false" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 对于长时间不使用的连接强制关闭 -->
		<property name="removeAbandoned" value="true" />
		<!-- 关闭超过30分钟的空闲连接，1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="mergeStat" /> -->
		<property name="filters" value="stat" />
	</bean>


	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--数据库连接池-->
		<property name="dataSource" ref="dataSource"/>
		<!--加载mybatis全局配置文件-->
		<property name="configLocation" value="classpath:mybatis/Configuration.xml"/>
	</bean>


	<!-- redis连接池配置-->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >
		<!--最大空闲数-->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!--连接池的最大数据库连接数  -->
		<property name="maxTotal" value="${redis.maxTotal}" />
		<!--最大建立连接等待时间-->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
		<!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
		<!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
		<!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<!--在空闲时检查有效性, 默认false  -->
		<property name="testWhileIdle" value="${redis.testWhileIdle}" />
	</bean>

	<!--redis连接工厂 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
		<property name="poolConfig" ref="jedisPoolConfig"></property>
		<!--IP地址 -->
		<property name="hostName" value="${redis.hostName}"></property>
		<!--端口号  -->
		<property name="port" value="${redis.port}"></property>
		<!--如果Redis设置有密码  -->
		<property name="password" value="${redis.password}" />
		<!--客户端超时时间单位是毫秒  -->
		<property name="timeout" value="${redis.timeout}"></property>
	</bean>

	<!--redis操作模版,使用该对象可以操作redis  -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
		<property name="keySerializer" >
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer" >
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
		</property>
		<!--开启事务  -->
		<property name="enableTransactionSupport" value="true"></property>
	</bean >

	<bean id="redisUtil" class="com.yzz.blog.util.RedisUtil">
	</bean>






	<!--mapper扫描器-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--如果需要扫描多个包，中间使用半角逗号隔开-->
		<property name="basePackage" value="com.yzz.blog.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>


	<!-- 事务管理器 -->
	<!-- 对mybatis操作数据事务控制，spring使用jdbc的事务控制类 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源dataSource在applicationContex-dao.xml中配置了 -->
		<property name="dataSource" ref="dataSource"/>
	</bean>


	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<bean id="serviceAop" class="com.yzz.blog.aop.ServiceAop"/>

	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.yzz.blog.service.impl.*.*(..))"/>
		<aop:aspect id="redisCheck" ref="serviceAop">
			<aop:pointcut id="addAllMethod" expression="execution(* com.yzz.blog.service.impl.*.*(..))" />
			<aop:around method="execute" pointcut-ref="addAllMethod" />
		</aop:aspect>
	</aop:config>

	<!-- 用户管理的service -->
	<bean id="userService" class="com.yzz.blog.service.impl.UserServiceImpl"/>

	<!-- 文章管理的service -->
	<bean id="articleService" class="com.yzz.blog.service.impl.ArticleServiceImpl"/>

	<!-- 分类管理的service -->
	<bean id="categoryService" class="com.yzz.blog.service.impl.CategoryServiceImpl"/>

	<!-- 标签管理的service -->
	<bean id="tagService" class="com.yzz.blog.service.impl.TagServiceImpl"/>

	<!--链接管理的service-->
	<bean id="linkService" class="com.yzz.blog.service.impl.LinkServiceImpl"/>

	<!--页面管理的service-->
	<bean id="pageService" class="com.yzz.blog.service.impl.PageServiceImpl"/>

	<!--网站信息管理的service-->
	<bean id="optionService" class="com.yzz.blog.service.impl.OptionsServiceImpl"/>

	<!--评论管理的service-->
	<bean id="commentService" class="com.yzz.blog.service.impl.CommentServiceImpl"/>

	<!--评论管理的service-->
	<bean id="noticeService" class="com.yzz.blog.service.impl.NoticeServiceImpl"/>

	<!--菜单管理的service-->
	<bean id="menuService" class="com.yzz.blog.service.impl.MenuServiceImpl"/>



	<!--常用功能-->
	<bean id="functions" class="com.yzz.blog.util.Functions"/>


</beans>

